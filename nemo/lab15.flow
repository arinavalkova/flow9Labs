import string;
import lingo/pegcode/driver;
import common/vnemo_runner;

TranslatorState(src: string, maxLabel: int, prevStateMaxLabel: int);

translateNemo(nemo: Nemo) -> string {
    translateDeclarations = TranslatorState(massiveOfDeclarations2str(nemo.a) + "\n", 0, -1);
    translatedString = B2S(nemo.b, translateDeclarations).src;
    translatedString;
}

B2S(operator : Operator, prevState : TranslatorState) -> TranslatorState {
    gotoLabel = prevState.maxLabel + 1;
	switch (operator) {
		Assignment(variable, expression) : {
	        TranslatorState(prevState.src + 
            statement2str(AssignmentStatement(prevState.maxLabel, variable.c, expression, [Label(gotoLabel)])) + "\n"
            , gotoLabel
            , prevState.maxLabel
            );
        }
        Printing(expression) : {
            TranslatorState(prevState.src + 
            statement2str(PrintingStatement(prevState.maxLabel, expression, [Label(gotoLabel)])) + "\n"
            , gotoLabel
            , prevState.maxLabel
            );
        }
		Question(l, op, r) : {
            TranslatorState(prevState.src + 
            statement2str(IfStatement(prevState.maxLabel, op, l, r, [Label(gotoLabel)], [])) + "\n"
            , gotoLabel
            , prevState.maxLabel
            );
        }
		Scope(ops) : {
            fold(ops, prevState, \currentState, nextOperator -> B2S(nextOperator, currentState));
        }
		Choice(ops) : {
             opsStates = splitOperators(ops, prevState.maxLabel);
             nextLabels = map(opsStates, \state -> state.maxLabel);
             operatorsStartLabels = concat([prevState.maxLabel + 1], map(take(nextLabels, length(nextLabels) - 1), \label -> label + 1)); 
             startChoice = statement2str(makeIfStatement(prevState.maxLabel, operatorsStartLabels)) + "\n";

             lastOperatorState = opsStates[length(opsStates) - 1];
             end = lastOperatorState.maxLabel;
             operatorsSrc = concatStrings(map(take(opsStates, length(opsStates) - 1), 
             \state -> (state.src + statement2str(makeIfStatement(state.maxLabel, [end])) + "\n"))) + lastOperatorState.src;

             TranslatorState(prevState.src + startChoice + operatorsSrc, opsStates[length(opsStates) - 1].maxLabel, prevState.maxLabel);
        }
		Loop(op) : {
            translatedBody = B2S(op, TranslatorState("", gotoLabel, prevState.maxLabel));
            end = translatedBody.maxLabel;

            TranslatorState(
                prevState.src +
                statement2str(makeIfStatement(prevState.maxLabel, [gotoLabel, end + 1])) + "\n" +
                translatedBody.src + 
                statement2str(makeIfStatement(end, [prevState.maxLabel])) + "\n",
                end + 1,
                prevState.maxLabel
            );
        }
	}
}

makeIfStatement(label: int, goto: [int]) -> IfStatement {
    IfStatement(label
        , "=="
        , Number(0)
        , Number(0)
        , map(goto, \id -> Label(id))
        , []
    );
}

splitOperators(ops: [Operator], prevLabel: int) -> [TranslatorState] {
    fold(
        tail(ops),
        [B2S(ops[0], TranslatorState("", prevLabel + 1, prevLabel))],
        \acc, nextOperator -> 
                            concat(acc, [B2S(nextOperator, TranslatorState("", acc[length(acc) - 1].maxLabel + 1, acc[length(acc) - 1].maxLabel))])
    );
}

main() {
    file_name = "test.nemo";
    nemo = str2nemo(getFileContent(file_name));
    vNemoString = translateNemo(nemo);
    println(vNemoString);
    vNemo = str2VNemo(vNemoString);
    runVNemo(vNemo);
}
