import lingo/pegcode/driver;

gram = "#include lab9.lingo"

VarTree ::= VarNode, Number, Variable, Fraction;
  VarNode(l: VarTree, op: string, r: VarTree);
  Number(num: double);
  Variable(var: string);
  Fraction(first: VarTree, second:VarTree);

operation(l: double, op: string, r: double) -> Maybe<double> {

    if(op == "+"){
        Some(l + r)
    }
    else if(op == "-") {
        Some(l - r)
    }
    else if(op == "*") {
        Some(l * r)
    }
    else if(op == "/") {
        Some(l / r)
    }
    else if(op == "%") {
        Some(l % r)
    }
    else if(op == "^") {
        Some(dpow(l, r))
    }
    else {
        None();
    }
}

buildSub(xs : [flow]) {
	fold(xs[1], xs[0], \acc, x -> VarNode(acc, x.op, x.r))
}

specialPegActions = {
	t = setTree(defaultPegActions.t, "buildSub", buildSub);
	SemanticActions(t);
}

s2varTree(str: string) -> VarTree {
  parsic(compilePegGrammar(gram), str, specialPegActions);
}

varTree2s(tree: VarTree) -> string {
    switch (tree) {
        VarNode(l, op, r): "(" + varTree2s(l) + op + varTree2s(r) + ")";
        Number(val): d2s(val);
        Variable(var): var;
        Fraction(f, s): varTree2s(f) + "/" + varTree2s(s);
    }
}

varTree2iNum(tree: VarTree) -> Maybe<double> {
    switch(tree) {
        VarNode(l, op, r): maybeBind2(\x, y -> operation(x, op, y))(varTree2iNum(l), varTree2iNum(r));
        Number(val): Some(val);
        Variable(var): None();
        Fraction(f, s): maybeBind2(\x, y -> operation(x, "/", y))(varTree2iNum(f), varTree2iNum(s));
    }
}

varTree2iVariable(tree: VarTree, vars : Tree<string, double>) -> Maybe<double> {
    switch(tree) {
        VarNode(l, op, r): maybeBind2(\x, y -> operation(x, op, y))(varTree2iVariable(l, vars), varTree2iVariable(r, vars));
        Number(val): Some(val);
        Variable(var):lookupTree(vars, var);
        Fraction(f, s): maybeBind2(\x, y -> operation(x, "/", y))(varTree2iVariable(f, vars), varTree2iVariable(s, vars));
    }
}

main() {
  line = getUrlParameter("line");
  varsTree = fold(getAllUrlParametersArray(), makeTree(), \tree, var ->{
      if(var[0] == "line")
          tree
      else
          setTree(tree, var[0], s2d(var[1]))
  });
  t = s2varTree(line);
  println(t);
  println(varTree2iVariable(t, varsTree));
}
