import runtime;
import string;
import lingo/pegcode/driver;

gram = "#include lab10.lingo"

VarTree ::= VarNode, Number, Variable, Neg, Fraction;
  VarNode(l: VarTree, op: string, r: VarTree);
  Number(num: double);
  Variable(var: string);
  Neg(num: VarTree);
  Fraction(first: VarTree, second:VarTree);

s2varTree(str: string) -> VarTree {
  parsic(compilePegGrammar(gram), str, defaultPegActions)
}

varTree2s(tree: VarTree) -> string {
    switch (tree) {
        VarNode(l, op, r) : "(" + varTree2s(l) + op + varTree2s(r) + ")";
        Neg(num) : "(-" + varTree2s(num) + ")";
        Number(val) : d2s(val);
        Variable(var) : var;
        Fraction(f, s): "(" + varTree2s(f) + "/" + varTree2s(s) + ")";
    }
}

sumFunction(l: VarTree, r:VarTree) -> VarTree {
    switch(l) {
        Number(val_l) : {
            if (val_l == 0.0) {
                r;
            }
            else {
                switch (r) {
                    Number(val_r) : {
                        if (val_r == 0.0) {
                            l;
                        }
                        else {
                            VarNode(l, "+", r);
                        }
                    }
                    default : {
                        VarNode(l, "+", r);
                    }
                }
            }
        }
        Fraction(left, right) : {
            switch (left) {
                Number(l_num) : {
                    switch (r) {
                        Fraction(r_left, r_right) : {
                            switch (r_left) {
                                Number(r_left_num) : {
                                    switch (right) {
                                        Number(r_num) : {
                                            switch (r_right) {
                                                Number(r_right_num) : {
                                                    if (r_num == r_right_num) {
                                                        Fraction(Number(l_num + r_left_num), r_right);
                                                    } else {
                                                        VarNode(l, "+", r);
                                                    }
                                                }
                                                default : {
                                                    VarNode(l, "+", r);
                                                }
                                            }
                                        }
                                        default : {
                                            VarNode(l, "+", r);
                                        }
                                    }
                                }
                                default : {
                                    VarNode(l, "+", r);
                                }
                            }
                        }
                        Number(num) : {
                            if (num == 0.0) {
                                l;
                            } else {
                                 VarNode(l, "+", r);
                            }
                        }
                        default : {
                            VarNode(l, "+", r);
                        }
                    }
                }
                default : {
                    VarNode(l, "+", r);
                }
            }
        }
        default : {
            switch (r) {
                Number(val): {
                    if (val == 0.0) {
                        l;
                    }
                    else {
                        VarNode(l, "+", r);
                    }
                }
                default : {
                   VarNode(l, "+", r);
                }
            }
        }
    }
}
   
mulFunction(l: VarTree, r: VarTree) -> VarTree {
    switch (l) {
        Number(val_l) : {
            if (val_l == 0.0) {
                Number(0.0);
            }
            else if (val_l == 1.0) {
                r;
            }
            else {
                switch (r) {
                    Number(val_r) : {
                        if (val_r == 0.0) {
                        Number(0.0);
                        }
                        else if (val_r == 1.0) {
                            l;
                        }
                        else {
                            VarNode(l, "*", r);
                        }
                    } 
                    Fraction(left, right) : {
                        switch (left) {
                            Number(left_num) : {
                                switch (right) {
                                    Number(right_num) : {
                                        Fraction(Number(val_l * left_num), Number(right_num));
                                    }
                                    default : {
                                        VarNode(l, "*", r);
                                    }
                                }
                            }
                            default : {
                                VarNode(l, "*", r);
                            }
                        }
                    }
                    default : {
                        VarNode(l, "*", r);
                    }
                }
            }
        }
        Fraction(left, right) : {
            switch (left) {
                Number(l_num) : {
                    switch (r) {
                        Fraction(r_left, r_right) : {
                            switch (r_left) {
                                Number(r_left_num) : {
                                    switch (right) {
                                        Number(r_num) : {
                                            switch (r_right) {
                                                Number(r_right_num) : {
                                                    Fraction(Number(l_num * r_left_num), Number(r_num * r_right_num));
                                                }
                                                default : {
                                                    VarNode(l, "*", r);
                                                }
                                            }
                                        }
                                        default : {
                                            VarNode(l, "*", r);
                                        }
                                    }
                                }
                                default : {
                                    VarNode(l, "*", r);
                                }
                            }
                        }
                        Number(num) : {
                            switch (right) {
                                Number(r_num) : {
                                    Fraction(Number(num * l_num), Number(r_num));
                                }
                                default : {
                                     VarNode(l, "*", r);
                                }
                            }
                        }
                        default : {
                            VarNode(l, "*", r);
                        }
                    }
                }
                default : {
                    VarNode(l, "*", r);
                }
            }
        }
        default : {
            switch (r) {
                Number(val) : {
                    if (val == 0.0) {
                       Number(0.0);
                    }
                    else if (val == 1.0) {
                        l;
                    }
                    else {
                        VarNode(l, "*", r);
                    }
                }
                default : {
                    VarNode(l, "*", r);
                }
            }
        }
    }
}

divFunction(l: VarTree, r: VarTree) -> VarTree {
    switch(l) {
        Number(val_l): {
            if (val_l == 0.0) {
                Number(0.0);
            }
            else {
                switch (r) {
                    Number(val_r): {
                        if (val_r == 1.0) {
                            l;
                        }
                        else {
                            VarNode(l, "/", r);
                        }
                    }
                    Fraction(left, right) : {
                        switch (left) {
                            Number(left_num) : {
                                switch (right) {
                                    Number(right_num) : {
                                        Fraction(Number(val_l * right_num), Number(left_num));
                                    }
                                    default : {
                                        VarNode(l, "/", r);
                                    }
                                }
                            }
                            default : {
                                VarNode(l, "/", r);
                            }
                        }
                    }
                    default : {
                        VarNode(l, "/", r);
                    }
                }
            }
        }
        Fraction(left, right) : {
            switch (left) {
                Number(l_num) : {
                    switch (r) {
                        Fraction(r_left, r_right) : {
                            switch (r_left) {
                                Number(r_left_num) : {
                                    switch (right) {
                                        Number(r_num) : {
                                            switch (r_right) {
                                                Number(r_right_num) : {
                                                    Fraction(Number(l_num * r_right_num), Number(r_num * r_left_num));
                                                }
                                                default : {
                                                    VarNode(l, "/", r);
                                                }
                                            }
                                        }
                                        default : {
                                            VarNode(l, "/", r);
                                        }
                                    }
                                }
                                default : {
                                    VarNode(l, "/", r);
                                }
                            }
                        }
                        Number(num) : {
                            switch (right) {
                                Number(r_num) : {
                                    Fraction(Number(l_num), Number(r_num * num));
                                }
                                default : {
                                     VarNode(l, "/", r);
                                }
                            }
                        }
                        default : {
                            VarNode(l, "/", r);
                        }
                    }
                }
                default : {
                    VarNode(l, "/", r);
                }
            }
        }
        default : {
            switch (r) {
                Number(val): {
                    if (val == 1.0) {
                        l;
                    }
                    else {
                        VarNode(l, "/", r);
                    }
                }
                Fraction(left, right) : {
                        switch (left) {
                            Number(left_num) : {
                                switch (right) {
                                    Number(right_num) : {
                                        VarNode(VarNode(l, "*", Number(right_num)), "/", Number(left_num));
                                    }
                                    default : {
                                        VarNode(l, "/", r);
                                    }
                                }
                            }
                            default : {
                                VarNode(l, "/", r);
                            }
                        }
                    }
                default: {
                    VarNode(l, "/", r);
                }
            }
        }
    }
}

difFunction(l: VarTree, r: VarTree) -> VarTree {
    switch (l) {
            Number(val_l): {
            if (val_l == 0.0) {
                Neg(r);
            }
            else {
                switch (r) {
                    Number(val_r): {
                        if (val_r == 0.0) {
                            l;
                        }
                        else {
                            VarNode(l, "-", r);
                        }
                    }
                    default: {
                        VarNode(l, "-", r);
                    }
                }
            }
        }
        Fraction(left, right) : {
            switch (left) {
                Number(l_num) : {
                    switch (r) {
                        Fraction(r_left, r_right) : {
                            switch (r_left) {
                                Number(r_left_num) : {
                                    switch (right) {
                                        Number(r_num) : {
                                            switch (r_right) {
                                                Number(r_right_num) : {
                                                    if (r_num == r_right_num) {
                                                        if (l_num - r_left_num < 0.0) {
                                                            Neg(Fraction(Number(r_left_num - l_num), r_right));
                                                        } else if (l_num - r_left_num > 0.0) {
                                                             Fraction(Number(l_num - r_left_num), r_right);
                                                        } else {
                                                            Number(0.0);
                                                        }
                                                    } else {
                                                        VarNode(l, "-", r);
                                                    }
                                                }
                                                default : {
                                                    VarNode(l, "-", r);
                                                }
                                            }
                                        }
                                        default : {
                                            VarNode(l, "-", r);
                                        }
                                    }
                                }
                                default : {
                                    VarNode(l, "-", r);
                                }
                            }
                        }
                        Number(num) : {
                            if (num == 0.0) {
                                l;
                            } else {
                                 VarNode(l, "-", r);
                            }
                        }
                        default : {
                            VarNode(l, "-", r);
                        }
                    }
                }
                default : {
                    VarNode(l, "-", r);
                }
            }
        }
        default : {
            switch (r) {
                Number(val): {
                    if (val == 0.0) {
                        l;
                    }
                    else {
                        VarNode(l, "-", r); 
                    }
                }
                default : {
                    VarNode(l, "-", r); 
                }
            }
        }
    }
}

degFunction(l: VarTree, r: VarTree) -> VarTree {
    switch (l) {
            Number(val_l): {
            if (val_l == 1.0) {
                Number(1.0);
            }
            else if (val_l == 0.0) {
                Number(0.0);
            }
            else {
                switch (r) {
                    Number(val_r): {
                        if (val_r == 0.0) {
                            Number(1.0);
                        }
                        else if (val_r == 1.0) {
                            l;
                        }
                        else {
                            VarNode(l, "^", r); 
                        }
                    }
                    default: {
                        VarNode(l, "^", r); 
                    }
                }
            }
        }
        Fraction(left, right) : {
            switch (left) {
                Number(left_num) : {
                    switch (right) {
                        Number(right_num) : {
                            switch (r) {
                                Number(r_num) : {
                                    Fraction(Number(dpow(left_num, r_num)), Number(dpow(right_num, r_num)));
                                }
                                Fraction(left2, right2) : {
                                    switch (left2) {
                                        Number(left2_num) : {
                                            switch (right2) {
                                                Number(right2_num) : {
                                                    Fraction(
                                                      Number(dpow(left_num, left2_num / right2_num))
                                                    , Number(dpow(right_num, left2_num / right2_num)));
                                                }
                                                default : {
                                                    VarNode(l, "^", r);
                                                }
                                            }
                                        }
                                        default : {
                                            VarNode(l, "^", r);
                                        }
                                    }
                                }
                                default : {
                                    VarNode(l, "^", r);
                                }
                            }
                        }
                        default : {
                            VarNode(l, "^", r);
                        }
                    }
                }
                default : {
                    VarNode(l, "^", r);
                }
            }
        }
        default : {
            switch (r) {
                Number(val): {
                    if (val == 0.0) {
                        Number(1.0);
                    }
                    else if (val == 1.0) {
                        l;
                    }
                    else {
                        VarNode(l, "^", r); 
                    }
                }
                default : {
                    VarNode(l, "^", r); 
                }
            }
        }
    }
}

negFunction(l: VarTree) -> VarTree {
    switch (l) {
            Number(val): {
            if (val == 0.0) {
                Number(0.0);
            }
            else {
                Neg(l);
            }
        }
        default : {
             Neg(l);
        }
    }
}

simplifyVarTree (tree: VarTree) -> VarTree {
    switch (tree) {
        VarNode(l, op, r) : {
            if (op == "+") {
                sumFunction(simplifyVarTree(l), simplifyVarTree(r));
            } else if (op == "*") {
                 mulFunction(simplifyVarTree(l), simplifyVarTree(r));
            } else if (op == "-") {
                difFunction(simplifyVarTree(l), simplifyVarTree(r));
            } else if (op == "/") {
                divFunction(simplifyVarTree(l), simplifyVarTree(r));
            } else { 
                degFunction(simplifyVarTree(l), simplifyVarTree(r));
            }
        }
        Neg(num) : {
            negFunction(simplifyVarTree(num));
        }
        Number(val) : Number(val);
        Variable(name) : Variable(name);
        Fraction(left, right) : {
            switch (left) {
                Number(left_num) : {
                    if (left_num == 0.0) {
                        Number(0.0);
                    } else {
                        switch (right) {
                            Number(right_num) : {
                                if (left_num == right_num) {
                                    Number(1.0);
                                } else {
                                    Fraction(left, right);
                                }
                            }
                            default : {
                                Fraction(left, right);
                            }
                        }
                    }
                }
                default : {
                    Fraction(left, right);
                }
            }
        }
    }
}

operation(l: double, op: string, r: double) -> Maybe<double> {

    if(op == "+"){
        Some(l + r)
    }
    else if(op == "-") {
        Some(l - r)
    }
    else if(op == "*") {
        Some(l * r)
    }
    else if(op == "/") {
        Some(l / r)
    }
    else if(op == "%") {
        Some(l % r)
    }
    else if(op == "^") {
        Some(dpow(l, r))
    }
    else {
        None();
    }
}

varTree2iVariable(tree: VarTree, vars: Tree<string, double>) -> Maybe<double> {
    switch (tree) {
        VarNode(l, op, r) : maybeBind2(\x, y -> operation(x, op, y))(varTree2iVariable(l, vars), varTree2iVariable(r, vars));
        Number(val) : Some(val);
        Neg(num) : {
            switch (num) {
                VarNode(l, op, r) : maybeBind2(\x, y -> operation(x, op, y))(varTree2iVariable(l, vars), varTree2iVariable(r, vars));
                Number(val) : Some(-val);
                Variable(var) : {
                    switch (lookupTree(vars, var)) {
                        Some(x) : Some(-x);
                        None() : None();
                    }
                }
                Neg(num2) : varTree2iVariable(num2, vars);
                Fraction(f, s): maybeBind2(\x, y -> operation(x, "/", y))(varTree2iVariable(f, vars), varTree2iVariable(s, vars));
            }
        }
        Variable(var) : lookupTree(vars, var)
        Fraction(f, s): maybeBind2(\x, y -> operation(x, "/", y))(varTree2iVariable(f, vars), varTree2iVariable(s, vars));
    }
}

main() {
    line = getUrlParameter("line");
    varsTree = fold(getAllUrlParametersArray(), makeTree(), \tree, var -> {
        if (var[0] == "line")
            tree
        else
            setTree(tree, var[0], s2d(var[1]))
    });

    t = s2varTree(line);
    println(varTree2iVariable(t, varsTree));
    simplify_t = simplifyVarTree(t);
    println(varTree2s(simplify_t));
    println(varTree2iVariable(simplify_t, varsTree));
}
